{"ast":null,"code":"const message = action => {\n  return {\n    name: action.name,\n    message: action.message,\n    subject: action.subject,\n    date: action.date\n  };\n};\n\nconst MessageReducer = (state = [], action) => {\n  // const [messages, setMessages] = useState([]);\n  let reminders = null;\n  console.log('STATE:', state);\n\n  switch (action.type) {\n    case 'newMessage':\n      console.log('InREDUCER Case newMEssage', action.message);\n      reminders = [message(action), ...state]; // console.log(reminders) \n\n      localStorage.setItem('messages', JSON.stringify(reminders));\n      return reminders;\n\n    case 'lsMessages':\n      console.log('InREDUCER Case LSMESSAGES', action.messages);\n      return action.messages;\n\n    default:\n      return state;\n  }\n};\n\nexport default MessageReducer;","map":{"version":3,"sources":["/media/bkmob/d9c3015e-7c1a-417b-9e34-17a798e49b02/pragmania-web/src/Reducers/newmessage.js"],"names":["message","action","name","subject","date","MessageReducer","state","reminders","console","log","type","localStorage","setItem","JSON","stringify","messages"],"mappings":"AAAA,MAAMA,OAAO,GAAIC,MAAD,IAAY;AACxB,SAAO;AACHC,IAAAA,IAAI,EAAED,MAAM,CAACC,IADV;AAEHF,IAAAA,OAAO,EAAEC,MAAM,CAACD,OAFb;AAGHG,IAAAA,OAAO,EAAEF,MAAM,CAACE,OAHb;AAIHC,IAAAA,IAAI,EAAEH,MAAM,CAACG;AAJV,GAAP;AAMH,CAPD;;AAQA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAG,EAAT,EAAaL,MAAb,KAAwB;AAC3C;AACA,MAAIM,SAAS,GAAG,IAAhB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBH,KAAtB;;AACA,UAAQL,MAAM,CAACS,IAAf;AACI,SAAK,YAAL;AACIF,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCR,MAAM,CAACD,OAAhD;AACAO,MAAAA,SAAS,GAAG,CAACP,OAAO,CAACC,MAAD,CAAR,EAAkB,GAAGK,KAArB,CAAZ,CAFJ,CAGI;;AACAK,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCC,IAAI,CAACC,SAAL,CAAeP,SAAf,CAAjC;AACA,aAAOA,SAAP;;AACJ,SAAK,YAAL;AACIC,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCR,MAAM,CAACc,QAAhD;AACA,aAAOd,MAAM,CAACc,QAAd;;AACJ;AACI,aAAOT,KAAP;AAXR;AAeH,CAnBD;;AAoBA,eAAeD,cAAf","sourcesContent":["const message = (action) => {\n    return {\n        name: action.name,\n        message: action.message,\n        subject: action.subject,\n        date: action.date\n    }\n}\nconst MessageReducer = (state = [], action) => {\n    // const [messages, setMessages] = useState([]);\n    let reminders = null;\n    console.log('STATE:', state)\n    switch (action.type) {\n        case 'newMessage':\n            console.log('InREDUCER Case newMEssage', action.message)\n            reminders = [message(action), ...state];\n            // console.log(reminders) \n            localStorage.setItem('messages', JSON.stringify(reminders))\n            return reminders;\n        case 'lsMessages':\n            console.log('InREDUCER Case LSMESSAGES', action.messages)\n            return action.messages\n        default:\n            return state;\n\n    }\n\n}\nexport default MessageReducer;"]},"metadata":{},"sourceType":"module"}